// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: proto/bitbom.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommandService_IngestSBOM_FullMethodName = "/bitbom.CommandService/IngestSBOM"
	CommandService_Cache_FullMethodName      = "/bitbom.CommandService/Cache"
	CommandService_IngestOSV_FullMethodName  = "/bitbom.CommandService/IngestOSV"
)

// CommandServiceClient is the client API for CommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandServiceClient interface {
	IngestSBOM(ctx context.Context, in *IngestSBOMRequest, opts ...grpc.CallOption) (*IngestSBOMResponse, error)
	Cache(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error)
	IngestOSV(ctx context.Context, in *IngestOSVRequest, opts ...grpc.CallOption) (*IngestOSVResponse, error)
}

type commandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandServiceClient(cc grpc.ClientConnInterface) CommandServiceClient {
	return &commandServiceClient{cc}
}

func (c *commandServiceClient) IngestSBOM(ctx context.Context, in *IngestSBOMRequest, opts ...grpc.CallOption) (*IngestSBOMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestSBOMResponse)
	err := c.cc.Invoke(ctx, CommandService_IngestSBOM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) Cache(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CacheResponse)
	err := c.cc.Invoke(ctx, CommandService_Cache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) IngestOSV(ctx context.Context, in *IngestOSVRequest, opts ...grpc.CallOption) (*IngestOSVResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestOSVResponse)
	err := c.cc.Invoke(ctx, CommandService_IngestOSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandServiceServer is the server API for CommandService service.
// All implementations must embed UnimplementedCommandServiceServer
// for forward compatibility.
type CommandServiceServer interface {
	IngestSBOM(context.Context, *IngestSBOMRequest) (*IngestSBOMResponse, error)
	Cache(context.Context, *CacheRequest) (*CacheResponse, error)
	IngestOSV(context.Context, *IngestOSVRequest) (*IngestOSVResponse, error)
	mustEmbedUnimplementedCommandServiceServer()
}

// UnimplementedCommandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommandServiceServer struct{}

func (UnimplementedCommandServiceServer) IngestSBOM(context.Context, *IngestSBOMRequest) (*IngestSBOMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestSBOM not implemented")
}
func (UnimplementedCommandServiceServer) Cache(context.Context, *CacheRequest) (*CacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cache not implemented")
}
func (UnimplementedCommandServiceServer) IngestOSV(context.Context, *IngestOSVRequest) (*IngestOSVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestOSV not implemented")
}
func (UnimplementedCommandServiceServer) mustEmbedUnimplementedCommandServiceServer() {}
func (UnimplementedCommandServiceServer) testEmbeddedByValue()                        {}

// UnsafeCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandServiceServer will
// result in compilation errors.
type UnsafeCommandServiceServer interface {
	mustEmbedUnimplementedCommandServiceServer()
}

func RegisterCommandServiceServer(s grpc.ServiceRegistrar, srv CommandServiceServer) {
	// If the following call pancis, it indicates UnimplementedCommandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommandService_ServiceDesc, srv)
}

func _CommandService_IngestSBOM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestSBOMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).IngestSBOM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandService_IngestSBOM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).IngestSBOM(ctx, req.(*IngestSBOMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_Cache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).Cache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandService_Cache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).Cache(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_IngestOSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestOSVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).IngestOSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandService_IngestOSV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).IngestOSV(ctx, req.(*IngestOSVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommandService_ServiceDesc is the grpc.ServiceDesc for CommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bitbom.CommandService",
	HandlerType: (*CommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngestSBOM",
			Handler:    _CommandService_IngestSBOM_Handler,
		},
		{
			MethodName: "Cache",
			Handler:    _CommandService_Cache_Handler,
		},
		{
			MethodName: "IngestOSV",
			Handler:    _CommandService_IngestOSV_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bitbom.proto",
}

const (
	QueryService_QueryDependencies_FullMethodName = "/bitbom.QueryService/QueryDependencies"
	QueryService_AllKeys_FullMethodName           = "/bitbom.QueryService/AllKeys"
	QueryService_CustomLeaderboard_FullMethodName = "/bitbom.QueryService/CustomLeaderboard"
	QueryService_WeightedNACD_FullMethodName      = "/bitbom.QueryService/WeightedNACD"
)

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryServiceClient interface {
	QueryDependencies(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	AllKeys(ctx context.Context, in *AllKeysRequest, opts ...grpc.CallOption) (*AllKeysResponse, error)
	CustomLeaderboard(ctx context.Context, in *CustomLeaderboardRequest, opts ...grpc.CallOption) (*CustomLeaderboardResponse, error)
	WeightedNACD(ctx context.Context, in *WeightedNACDRequest, opts ...grpc.CallOption) (*WeightedNACDResponse, error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) QueryDependencies(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, QueryService_QueryDependencies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) AllKeys(ctx context.Context, in *AllKeysRequest, opts ...grpc.CallOption) (*AllKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllKeysResponse)
	err := c.cc.Invoke(ctx, QueryService_AllKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) CustomLeaderboard(ctx context.Context, in *CustomLeaderboardRequest, opts ...grpc.CallOption) (*CustomLeaderboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomLeaderboardResponse)
	err := c.cc.Invoke(ctx, QueryService_CustomLeaderboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) WeightedNACD(ctx context.Context, in *WeightedNACDRequest, opts ...grpc.CallOption) (*WeightedNACDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WeightedNACDResponse)
	err := c.cc.Invoke(ctx, QueryService_WeightedNACD_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
// All implementations must embed UnimplementedQueryServiceServer
// for forward compatibility.
type QueryServiceServer interface {
	QueryDependencies(context.Context, *QueryRequest) (*QueryResponse, error)
	AllKeys(context.Context, *AllKeysRequest) (*AllKeysResponse, error)
	CustomLeaderboard(context.Context, *CustomLeaderboardRequest) (*CustomLeaderboardResponse, error)
	WeightedNACD(context.Context, *WeightedNACDRequest) (*WeightedNACDResponse, error)
	mustEmbedUnimplementedQueryServiceServer()
}

// UnimplementedQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServiceServer struct{}

func (UnimplementedQueryServiceServer) QueryDependencies(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDependencies not implemented")
}
func (UnimplementedQueryServiceServer) AllKeys(context.Context, *AllKeysRequest) (*AllKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllKeys not implemented")
}
func (UnimplementedQueryServiceServer) CustomLeaderboard(context.Context, *CustomLeaderboardRequest) (*CustomLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomLeaderboard not implemented")
}
func (UnimplementedQueryServiceServer) WeightedNACD(context.Context, *WeightedNACDRequest) (*WeightedNACDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WeightedNACD not implemented")
}
func (UnimplementedQueryServiceServer) mustEmbedUnimplementedQueryServiceServer() {}
func (UnimplementedQueryServiceServer) testEmbeddedByValue()                      {}

// UnsafeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServiceServer will
// result in compilation errors.
type UnsafeQueryServiceServer interface {
	mustEmbedUnimplementedQueryServiceServer()
}

func RegisterQueryServiceServer(s grpc.ServiceRegistrar, srv QueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QueryService_ServiceDesc, srv)
}

func _QueryService_QueryDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryDependencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_QueryDependencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryDependencies(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_AllKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).AllKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_AllKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).AllKeys(ctx, req.(*AllKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_CustomLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CustomLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_CustomLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CustomLeaderboard(ctx, req.(*CustomLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_WeightedNACD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeightedNACDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).WeightedNACD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_WeightedNACD_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).WeightedNACD(ctx, req.(*WeightedNACDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryService_ServiceDesc is the grpc.ServiceDesc for QueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bitbom.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryDependencies",
			Handler:    _QueryService_QueryDependencies_Handler,
		},
		{
			MethodName: "AllKeys",
			Handler:    _QueryService_AllKeys_Handler,
		},
		{
			MethodName: "CustomLeaderboard",
			Handler:    _QueryService_CustomLeaderboard_Handler,
		},
		{
			MethodName: "WeightedNACD",
			Handler:    _QueryService_WeightedNACD_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bitbom.proto",
}
