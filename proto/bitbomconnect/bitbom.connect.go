// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/bitbom.proto

package bitbomconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	proto "github.com/bit-bom/minefield/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CommandServiceName is the fully-qualified name of the CommandService service.
	CommandServiceName = "bitbom.CommandService"
	// QueryServiceName is the fully-qualified name of the QueryService service.
	QueryServiceName = "bitbom.QueryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CommandServiceIngestSBOMProcedure is the fully-qualified name of the CommandService's IngestSBOM
	// RPC.
	CommandServiceIngestSBOMProcedure = "/bitbom.CommandService/IngestSBOM"
	// CommandServiceCacheProcedure is the fully-qualified name of the CommandService's Cache RPC.
	CommandServiceCacheProcedure = "/bitbom.CommandService/Cache"
	// CommandServiceIngestOSVProcedure is the fully-qualified name of the CommandService's IngestOSV
	// RPC.
	CommandServiceIngestOSVProcedure = "/bitbom.CommandService/IngestOSV"
	// QueryServiceQueryDependenciesProcedure is the fully-qualified name of the QueryService's
	// QueryDependencies RPC.
	QueryServiceQueryDependenciesProcedure = "/bitbom.QueryService/QueryDependencies"
	// QueryServiceAllKeysProcedure is the fully-qualified name of the QueryService's AllKeys RPC.
	QueryServiceAllKeysProcedure = "/bitbom.QueryService/AllKeys"
	// QueryServiceCustomLeaderboardProcedure is the fully-qualified name of the QueryService's
	// CustomLeaderboard RPC.
	QueryServiceCustomLeaderboardProcedure = "/bitbom.QueryService/CustomLeaderboard"
	// QueryServiceWeightedNACDProcedure is the fully-qualified name of the QueryService's WeightedNACD
	// RPC.
	QueryServiceWeightedNACDProcedure = "/bitbom.QueryService/WeightedNACD"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	commandServiceServiceDescriptor               = proto.File_proto_bitbom_proto.Services().ByName("CommandService")
	commandServiceIngestSBOMMethodDescriptor      = commandServiceServiceDescriptor.Methods().ByName("IngestSBOM")
	commandServiceCacheMethodDescriptor           = commandServiceServiceDescriptor.Methods().ByName("Cache")
	commandServiceIngestOSVMethodDescriptor       = commandServiceServiceDescriptor.Methods().ByName("IngestOSV")
	queryServiceServiceDescriptor                 = proto.File_proto_bitbom_proto.Services().ByName("QueryService")
	queryServiceQueryDependenciesMethodDescriptor = queryServiceServiceDescriptor.Methods().ByName("QueryDependencies")
	queryServiceAllKeysMethodDescriptor           = queryServiceServiceDescriptor.Methods().ByName("AllKeys")
	queryServiceCustomLeaderboardMethodDescriptor = queryServiceServiceDescriptor.Methods().ByName("CustomLeaderboard")
	queryServiceWeightedNACDMethodDescriptor      = queryServiceServiceDescriptor.Methods().ByName("WeightedNACD")
)

// CommandServiceClient is a client for the bitbom.CommandService service.
type CommandServiceClient interface {
	IngestSBOM(context.Context, *connect.Request[proto.IngestSBOMRequest]) (*connect.Response[proto.IngestSBOMResponse], error)
	Cache(context.Context, *connect.Request[proto.CacheRequest]) (*connect.Response[proto.CacheResponse], error)
	IngestOSV(context.Context, *connect.Request[proto.IngestOSVRequest]) (*connect.Response[proto.IngestOSVResponse], error)
}

// NewCommandServiceClient constructs a client for the bitbom.CommandService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCommandServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CommandServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &commandServiceClient{
		ingestSBOM: connect.NewClient[proto.IngestSBOMRequest, proto.IngestSBOMResponse](
			httpClient,
			baseURL+CommandServiceIngestSBOMProcedure,
			connect.WithSchema(commandServiceIngestSBOMMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cache: connect.NewClient[proto.CacheRequest, proto.CacheResponse](
			httpClient,
			baseURL+CommandServiceCacheProcedure,
			connect.WithSchema(commandServiceCacheMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		ingestOSV: connect.NewClient[proto.IngestOSVRequest, proto.IngestOSVResponse](
			httpClient,
			baseURL+CommandServiceIngestOSVProcedure,
			connect.WithSchema(commandServiceIngestOSVMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// commandServiceClient implements CommandServiceClient.
type commandServiceClient struct {
	ingestSBOM *connect.Client[proto.IngestSBOMRequest, proto.IngestSBOMResponse]
	cache      *connect.Client[proto.CacheRequest, proto.CacheResponse]
	ingestOSV  *connect.Client[proto.IngestOSVRequest, proto.IngestOSVResponse]
}

// IngestSBOM calls bitbom.CommandService.IngestSBOM.
func (c *commandServiceClient) IngestSBOM(ctx context.Context, req *connect.Request[proto.IngestSBOMRequest]) (*connect.Response[proto.IngestSBOMResponse], error) {
	return c.ingestSBOM.CallUnary(ctx, req)
}

// Cache calls bitbom.CommandService.Cache.
func (c *commandServiceClient) Cache(ctx context.Context, req *connect.Request[proto.CacheRequest]) (*connect.Response[proto.CacheResponse], error) {
	return c.cache.CallUnary(ctx, req)
}

// IngestOSV calls bitbom.CommandService.IngestOSV.
func (c *commandServiceClient) IngestOSV(ctx context.Context, req *connect.Request[proto.IngestOSVRequest]) (*connect.Response[proto.IngestOSVResponse], error) {
	return c.ingestOSV.CallUnary(ctx, req)
}

// CommandServiceHandler is an implementation of the bitbom.CommandService service.
type CommandServiceHandler interface {
	IngestSBOM(context.Context, *connect.Request[proto.IngestSBOMRequest]) (*connect.Response[proto.IngestSBOMResponse], error)
	Cache(context.Context, *connect.Request[proto.CacheRequest]) (*connect.Response[proto.CacheResponse], error)
	IngestOSV(context.Context, *connect.Request[proto.IngestOSVRequest]) (*connect.Response[proto.IngestOSVResponse], error)
}

// NewCommandServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCommandServiceHandler(svc CommandServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	commandServiceIngestSBOMHandler := connect.NewUnaryHandler(
		CommandServiceIngestSBOMProcedure,
		svc.IngestSBOM,
		connect.WithSchema(commandServiceIngestSBOMMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	commandServiceCacheHandler := connect.NewUnaryHandler(
		CommandServiceCacheProcedure,
		svc.Cache,
		connect.WithSchema(commandServiceCacheMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	commandServiceIngestOSVHandler := connect.NewUnaryHandler(
		CommandServiceIngestOSVProcedure,
		svc.IngestOSV,
		connect.WithSchema(commandServiceIngestOSVMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/bitbom.CommandService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CommandServiceIngestSBOMProcedure:
			commandServiceIngestSBOMHandler.ServeHTTP(w, r)
		case CommandServiceCacheProcedure:
			commandServiceCacheHandler.ServeHTTP(w, r)
		case CommandServiceIngestOSVProcedure:
			commandServiceIngestOSVHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCommandServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCommandServiceHandler struct{}

func (UnimplementedCommandServiceHandler) IngestSBOM(context.Context, *connect.Request[proto.IngestSBOMRequest]) (*connect.Response[proto.IngestSBOMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitbom.CommandService.IngestSBOM is not implemented"))
}

func (UnimplementedCommandServiceHandler) Cache(context.Context, *connect.Request[proto.CacheRequest]) (*connect.Response[proto.CacheResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitbom.CommandService.Cache is not implemented"))
}

func (UnimplementedCommandServiceHandler) IngestOSV(context.Context, *connect.Request[proto.IngestOSVRequest]) (*connect.Response[proto.IngestOSVResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitbom.CommandService.IngestOSV is not implemented"))
}

// QueryServiceClient is a client for the bitbom.QueryService service.
type QueryServiceClient interface {
	QueryDependencies(context.Context, *connect.Request[proto.QueryRequest]) (*connect.Response[proto.QueryResponse], error)
	AllKeys(context.Context, *connect.Request[proto.AllKeysRequest]) (*connect.Response[proto.AllKeysResponse], error)
	CustomLeaderboard(context.Context, *connect.Request[proto.CustomLeaderboardRequest]) (*connect.Response[proto.CustomLeaderboardResponse], error)
	WeightedNACD(context.Context, *connect.Request[proto.WeightedNACDRequest]) (*connect.Response[proto.WeightedNACDResponse], error)
}

// NewQueryServiceClient constructs a client for the bitbom.QueryService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQueryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) QueryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &queryServiceClient{
		queryDependencies: connect.NewClient[proto.QueryRequest, proto.QueryResponse](
			httpClient,
			baseURL+QueryServiceQueryDependenciesProcedure,
			connect.WithSchema(queryServiceQueryDependenciesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		allKeys: connect.NewClient[proto.AllKeysRequest, proto.AllKeysResponse](
			httpClient,
			baseURL+QueryServiceAllKeysProcedure,
			connect.WithSchema(queryServiceAllKeysMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		customLeaderboard: connect.NewClient[proto.CustomLeaderboardRequest, proto.CustomLeaderboardResponse](
			httpClient,
			baseURL+QueryServiceCustomLeaderboardProcedure,
			connect.WithSchema(queryServiceCustomLeaderboardMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		weightedNACD: connect.NewClient[proto.WeightedNACDRequest, proto.WeightedNACDResponse](
			httpClient,
			baseURL+QueryServiceWeightedNACDProcedure,
			connect.WithSchema(queryServiceWeightedNACDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// queryServiceClient implements QueryServiceClient.
type queryServiceClient struct {
	queryDependencies *connect.Client[proto.QueryRequest, proto.QueryResponse]
	allKeys           *connect.Client[proto.AllKeysRequest, proto.AllKeysResponse]
	customLeaderboard *connect.Client[proto.CustomLeaderboardRequest, proto.CustomLeaderboardResponse]
	weightedNACD      *connect.Client[proto.WeightedNACDRequest, proto.WeightedNACDResponse]
}

// QueryDependencies calls bitbom.QueryService.QueryDependencies.
func (c *queryServiceClient) QueryDependencies(ctx context.Context, req *connect.Request[proto.QueryRequest]) (*connect.Response[proto.QueryResponse], error) {
	return c.queryDependencies.CallUnary(ctx, req)
}

// AllKeys calls bitbom.QueryService.AllKeys.
func (c *queryServiceClient) AllKeys(ctx context.Context, req *connect.Request[proto.AllKeysRequest]) (*connect.Response[proto.AllKeysResponse], error) {
	return c.allKeys.CallUnary(ctx, req)
}

// CustomLeaderboard calls bitbom.QueryService.CustomLeaderboard.
func (c *queryServiceClient) CustomLeaderboard(ctx context.Context, req *connect.Request[proto.CustomLeaderboardRequest]) (*connect.Response[proto.CustomLeaderboardResponse], error) {
	return c.customLeaderboard.CallUnary(ctx, req)
}

// WeightedNACD calls bitbom.QueryService.WeightedNACD.
func (c *queryServiceClient) WeightedNACD(ctx context.Context, req *connect.Request[proto.WeightedNACDRequest]) (*connect.Response[proto.WeightedNACDResponse], error) {
	return c.weightedNACD.CallUnary(ctx, req)
}

// QueryServiceHandler is an implementation of the bitbom.QueryService service.
type QueryServiceHandler interface {
	QueryDependencies(context.Context, *connect.Request[proto.QueryRequest]) (*connect.Response[proto.QueryResponse], error)
	AllKeys(context.Context, *connect.Request[proto.AllKeysRequest]) (*connect.Response[proto.AllKeysResponse], error)
	CustomLeaderboard(context.Context, *connect.Request[proto.CustomLeaderboardRequest]) (*connect.Response[proto.CustomLeaderboardResponse], error)
	WeightedNACD(context.Context, *connect.Request[proto.WeightedNACDRequest]) (*connect.Response[proto.WeightedNACDResponse], error)
}

// NewQueryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQueryServiceHandler(svc QueryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	queryServiceQueryDependenciesHandler := connect.NewUnaryHandler(
		QueryServiceQueryDependenciesProcedure,
		svc.QueryDependencies,
		connect.WithSchema(queryServiceQueryDependenciesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	queryServiceAllKeysHandler := connect.NewUnaryHandler(
		QueryServiceAllKeysProcedure,
		svc.AllKeys,
		connect.WithSchema(queryServiceAllKeysMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	queryServiceCustomLeaderboardHandler := connect.NewUnaryHandler(
		QueryServiceCustomLeaderboardProcedure,
		svc.CustomLeaderboard,
		connect.WithSchema(queryServiceCustomLeaderboardMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	queryServiceWeightedNACDHandler := connect.NewUnaryHandler(
		QueryServiceWeightedNACDProcedure,
		svc.WeightedNACD,
		connect.WithSchema(queryServiceWeightedNACDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/bitbom.QueryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case QueryServiceQueryDependenciesProcedure:
			queryServiceQueryDependenciesHandler.ServeHTTP(w, r)
		case QueryServiceAllKeysProcedure:
			queryServiceAllKeysHandler.ServeHTTP(w, r)
		case QueryServiceCustomLeaderboardProcedure:
			queryServiceCustomLeaderboardHandler.ServeHTTP(w, r)
		case QueryServiceWeightedNACDProcedure:
			queryServiceWeightedNACDHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedQueryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedQueryServiceHandler struct{}

func (UnimplementedQueryServiceHandler) QueryDependencies(context.Context, *connect.Request[proto.QueryRequest]) (*connect.Response[proto.QueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitbom.QueryService.QueryDependencies is not implemented"))
}

func (UnimplementedQueryServiceHandler) AllKeys(context.Context, *connect.Request[proto.AllKeysRequest]) (*connect.Response[proto.AllKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitbom.QueryService.AllKeys is not implemented"))
}

func (UnimplementedQueryServiceHandler) CustomLeaderboard(context.Context, *connect.Request[proto.CustomLeaderboardRequest]) (*connect.Response[proto.CustomLeaderboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitbom.QueryService.CustomLeaderboard is not implemented"))
}

func (UnimplementedQueryServiceHandler) WeightedNACD(context.Context, *connect.Request[proto.WeightedNACDRequest]) (*connect.Response[proto.WeightedNACDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitbom.QueryService.WeightedNACD is not implemented"))
}
